# -*- coding: utf-8 -*-
"""Submission2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZYTYe8-JCPbMZDy1w3Z4obs07Vyv19gs

*   Nama: Tuti Amalia
*   Email: amalia.tuti111@gmail.com
*   Asal: Kabupaten Gowa
*   Dataset yang digunakan: https://www.kaggle.com/hmavrodiev/london-bike-sharing-dataset

Library
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split

import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler

from tensorflow.keras.models import Sequential

"""Download Dataset"""

!wget --no-check-certificate 'https://drive.google.com/uc?export=download&id=1WbmK6pJfEpJZw-dvWNmzRl0SssX67vv8'  \
  -O 'archive.zip'

# melakukan ekstraksi pada file zip
import zipfile,os
fileZip = 'archive.zip'
zipRef = zipfile.ZipFile(fileZip, 'r')
zipRef.extractall('')
zipRef.close()

df=pd.read_csv('/content/london_merged.csv',parse_dates=['timestamp'],index_col='timestamp')
df.head()

#cek apakah ada data yang kosong
df.isnull().sum()

"""Visualisasi Data"""

df.columns

# Memilih fitur numerik dari kumpulan data

numerical_df = df.select_dtypes(exclude='object')

# Memvisualisasikan semua fitur numerik

for i in numerical_df:
  sns.displot(x = i, data = df, height = 6, aspect = 2, kde = True);
  plt.xlabel(i, fontsize = 15)

# mengambil data waktu tertentu seperti jam, hari, bulan, atau tahun.

df['hour'] = df.index.hour
df['day'] = df.index.day
df['month'] = df.index.month
df.head()

# # Memisahkan atribut train dan label
# X = df.drop('cnt', axis = 1).values
# y = df['cnt'].values

# X = np.array(X)
# y = np.array(y).reshape(-1,1)

# Scaling MinMaxScaler
def datasequences(data, window_size=1):
  X = []
  y = []
  scaler = MinMaxScaler(feature_range=(0,1))
  scaled = scaler.fit_transform(data)
  for i in range(len(data)-window_size):
    X.append(scaled[i:i+window_size])
    y.append(data['cnt'].iloc[i+window_size])
  return X, y, scaler

X,y, scaler= datasequences(df, window_size=24)
y = list(np.float_(y))
print(y)
print(np.array(y).shape)
print(np.array(X).shape)
print(np.array(y).dtype)
print(np.array(X).dtype)

# Split data training set dan validation set dengan perbandingan 80:20
X_train, X_test, y_train, y_test = train_test_split(np.array(X), np.array(y), test_size = 0.2, shuffle= False)
X_train.shape, X_test.shape, y_train.shape, y_test.shape

# Arsitektur Model
model = Sequential([
                    tf.keras.layers.LSTM(100, input_shape=(X_train.shape[1], X_train.shape[2]),return_sequences=True),
                    tf.keras.layers.LSTM(100),
                    tf.keras.layers.Dropout(0.5),
                    tf.keras.layers.Dense(30, activation="relu"),
                    tf.keras.layers.Dense(1),
])
model.summary()

mae = (df['cnt'].max() - df['cnt'].min()) * 10/100
print(mae)

# Inisiasi fungsi callback dengan syarat akurasi 90%
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if logs.get('mae')< mae:
      print('\nMAE telah mencapai <10%!')
      self.model.stop_training = True

# Inisiasi class myCallback ke dalam variable callbacks
callbacks = myCallback()

# Compile Model
optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(
    loss=tf.keras.losses.Huber(),
    optimizer=optimizer,
    metrics=["mae"])

history = model.fit(
    X_train,
    y_train,
    epochs=50,
    validation_data=(X_test,
                     y_test),
    callbacks=callbacks,
    verbose=1)

"""Plotting"""

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.ylabel('value')
plt.xlabel('No. epoch')
plt.legend(loc="upper left")
plt.show()

plt.plot(history.history['mae'], label='Training Accuracy')
plt.plot(history.history['val_mae'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.ylabel('value')
plt.xlabel('No. epoch')
plt.legend(loc="upper left")
plt.show()

